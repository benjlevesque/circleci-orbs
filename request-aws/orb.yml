---
version: 2.1

description: 'A set of commands for publishing Docker image to AWS ECR and managing AWS EKS'
orbs:
  aws-cli: circleci/aws-cli@0.0.1
  aws-ecr: circleci/aws-ecr@0.0.4
executors:
  default: aws-ecr/default
commands:
  k8s-install:
    steps:
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo cp ./aws-iam-authenticator /usr/bin/aws-iam-authenticator && export PATH=/usr/bin:$PATH
      - run:
          name: Install Kubectl
          command: |
              sudo apt-get update && sudo apt-get install -y apt-transport-https
              curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
              echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
              sudo apt-get update
              sudo apt-get install -y kubectl
  k8s-configure:
    parameters:
      cluster:
        type: string
        description: "The name of the EKS cluster to deploy to"
        default: $AWS_CLUSTER_NAME
    steps:
      - aws-cli/install
      - aws-cli/configure
      - run:
          name: Bootstrap Kubernetes cluster configuration
          command: aws eks update-kubeconfig --name << parameters.cluster >> --region $AWS_REGION
jobs:
  build-image:
    executor: aws-ecr/default
    parameters:
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: Dockerfile
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build docker image"
          command: "docker build -f << parameters.dockerfile >> << parameters.path >>"
  build_and_push_image:
    executor: aws-ecr/default
    parameters:
      repo:
        type: string
        description: Name of an Amazon ECR repository (whithout URL)
      tag:
        type: string
        description: Tag (latest is automatically applied)
    steps:
      - aws-cli/install
      - aws-cli/configure
      - checkout
      - setup_remote_docker
      - aws-ecr/ecr-login:
          region: $AWS_REGION
      - aws-ecr/build-image:
          repo: << parameters.repo >>
          tag: latest
      - aws-ecr/push-image:
          repo: << parameters.repo >>
          tag: latest
      - run:
          name: Tag & push image tag '<< parameters.tag >>'
          command: |
            TAG="<< parameters.tag >>"
            if [[ -n "$TAG" ]]; then
              IMG="$AWS_ECR_ACCOUNT_URL/<< parameters.repo >>"
              echo $IMG
              docker tag "$IMG:latest" "$IMG:$TAG"
              docker push "$IMG:$TAG"
            else
              echo "no custom tag"
            fi
  update-deployment:
    executor: aws-ecr/default
    parameters:
      cluster:
        type: string
        description: The name of the EKS cluster to deploy to
        default: $AWS_CLUSTER_NAME
      namespace:
        type: string
        description: The name of the K8s namespace to deploy to
      deployment:
        type: string
        description: The name of the K8s deployment to update
      account-url:
        type: string
        description: The Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr-ecr.us-west-2.amazonaws.com
        default: $AWS_ECR_ACCOUNT_URL
      repo:
        type: string
        description: The name of the ECR repo containing the image to update
      image:
        type: string
        description: The name of the docker image to update
      tag:
        type: string
        description: The name of the docker tag to apply
        default: latest
    steps:
      # required in case the tag is based on a file of the repo
      - checkout
      - k8s-install
      - k8s-configure:
          cluster: << parameters.cluster >>
      - run:
          name: Deploy image
          command: |
            IMAGE_VERSION="<< parameters.account-url >>/<< parameters.repo >>/<< parameters.image >>:<< parameters.tag >>"
            IMAGE_NAME="<< parameters.image >>"
            NAMESPACE="<< parameters.namespace >>"
            DEPLOYMENT="<< parameters.deployment >>"

            echo "NAMESPACE= $NAMESPACE"
            echo "DEPLOYMENT= $DEPLOYMENT"
            echo "IMAGE_NAME= $IMAGE_NAME"
            echo "IMAGE_VERSION= $IMAGE_VERSION"
            kubectl set image --namespace=$NAMESPACE deployment.apps/$DEPLOYMENT $IMAGE_NAME=$IMAGE_VERSION
